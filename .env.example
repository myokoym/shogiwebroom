# =================================
# ShogiWebRoom Environment Variables
# =================================
# Copy this file to .env and update values for your environment

# =================================
# Application Environment
# =================================
# Environment mode: 'development', 'production', or 'test'
NODE_ENV=development

# =================================
# Server Configuration
# =================================
# Port number for the server to listen on
# Default: 3000 (Nuxt.js default)
PORT=3000

# Host address for the server
# Use '0.0.0.0' for production to accept connections from any IP
# Use 'localhost' or '127.0.0.1' for local development
HOST=localhost

# =================================
# Redis Configuration
# =================================
# Redis connection URL for real-time game state synchronization
# Required for storing shogi board states, room data, and player sessions

# Local Redis (for development)
# REDIS_URL=redis://localhost:6379

# Upstash Redis (recommended for production)
# Sign up at https://upstash.com/ and create a Redis database
# Format: rediss://username:password@hostname:port
# REDIS_URL=rediss://default:your-password@your-redis-hostname.upstash.io:6380

# Alternative Redis providers:
# Redis Cloud: redis://username:password@hostname:port
# AWS ElastiCache: redis://your-elasticache-endpoint:6379
# Google Cloud Memorystore: redis://your-memorystore-ip:6379

# If REDIS_URL is not set, the application will attempt to connect to
# a local Redis instance on localhost:6379 (default Redis configuration)

# =================================
# Optional: Additional Configuration
# =================================
# Uncomment and modify these if you need custom settings

# Maximum number of players per room (default handled in application)
# MAX_PLAYERS_PER_ROOM=100

# Session timeout in seconds (for Redis key expiration)
# SESSION_TIMEOUT=3600

# Enable debug logging (set to 'true' for verbose logging)
# DEBUG=false

# CORS origins (comma-separated list for production)
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# =================================
# Production Deployment Examples
# =================================

# Example 1: Vercel + Upstash Redis
# NODE_ENV=production
# REDIS_URL=rediss://default:abc123@optimized-magpie-12345.upstash.io:6380

# Example 2: Heroku + Redis To Go
# NODE_ENV=production
# PORT=80
# HOST=0.0.0.0
# REDIS_URL=redis://redistogo:password@hostname:port

# Example 3: Local production setup
# NODE_ENV=production
# PORT=8080
# HOST=0.0.0.0
# REDIS_URL=redis://localhost:6379

# =================================
# Development Notes
# =================================
# 1. For local development, you can run Redis using Docker:
#    docker run -d -p 6379:6379 redis:alpine
#
# 2. To test without Redis, comment out REDIS_URL - the app will
#    attempt to connect to localhost:6379 by default
#
# 3. The application uses ioredis library which supports Redis Cluster,
#    Redis Sentinel, and standard Redis instances
#
# 4. For production, ensure your Redis instance supports persistence
#    to avoid losing game states during server restarts