name: Automated Testing

on:
  pull_request:
    branches: [master]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  push:
    branches: [master]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-compose-tests:
    name: Docker Compose Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*', '**/compose*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create test environment file
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "CI=true" >> .env

      - name: Run tests with Docker Compose
        run: |
          # Set Docker Buildx cache
          export BUILDX_CACHE_FROM=type=local,src=/tmp/.buildx-cache
          export BUILDX_CACHE_TO=type=local,dest=/tmp/.buildx-cache-new,mode=max
          
          # Run tests using the simple test compose file
          docker compose -f compose.test-simple.yaml build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from /tmp/.buildx-cache
          
          # Execute tests with timeout protection
          timeout 300 docker compose -f compose.test-simple.yaml up test --abort-on-container-exit
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Copy test results from container
        if: always()
        run: |
          # Create results directory
          mkdir -p test-results
          
          # Try to copy test results and coverage from the test container
          docker compose -f compose.test-simple.yaml run --rm \
            -v $(pwd)/test-results:/host-results \
            test sh -c '
              if [ -d "/app/coverage" ]; then 
                cp -r /app/coverage/* /host-results/ 2>/dev/null || echo "No coverage files to copy"
              fi
              if [ -d "/app/test-results" ]; then
                cp -r /app/test-results/* /host-results/ 2>/dev/null || echo "No test result files to copy"
              fi
              echo "Test artifacts collection completed"
            ' || echo "Test artifacts collection failed, continuing..."

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results/
            coverage/
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.run_number }}
          path: |
            test-results/lcov.info
            test-results/coverage-final.json
          retention-days: 7

      - name: Clean up test environment
        if: always()
        run: |
          docker compose -f compose.test-simple.yaml down -v --remove-orphans
          docker system prune -f --volumes

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: docker-compose-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*', '**/compose*.yaml') }}

      - name: Run integration tests
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "CI=true" >> .env
          
          # Build with cache
          docker compose -f compose.test-simple.yaml build \
            --cache-from /tmp/.buildx-cache
          
          # Run integration tests specifically
          timeout 240 docker compose -f compose.test-simple.yaml run --rm \
            test npm run test:integration

      - name: Clean up
        if: always()
        run: |
          docker compose -f compose.test-simple.yaml down -v --remove-orphans

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [docker-compose-tests, test-performance]
    if: always()

    steps:
      - name: Generate test summary
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Compose Tests | ${{ needs.docker-compose-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.test-performance.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Test Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Runtime**: ${{ github.event_name == 'pull_request' && '< 5 minutes' || 'Optimized for speed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Environment**: Docker Compose with Redis" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: Uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- All tests must pass before merging" >> $GITHUB_STEP_SUMMARY
          echo "- Test artifacts available for download" >> $GITHUB_STEP_SUMMARY
          echo "- Integration with existing CI workflow" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        if: needs.docker-compose-tests.result != 'success' || needs.test-performance.result != 'success'
        run: |
          echo "‚ùå One or more test suites failed"
          exit 1