name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'blogs/**'
      - '.kiro/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
      - 'test/**'
      - '**/*.test.js'
      - '**/*.spec.js'
      - 'jest.config.js'
      - 'playwright.config.js'
      - 'playwright.docker.config.js'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'blogs/**'
      - '.kiro/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
      - 'test/**'
      - '**/*.test.js'
      - '**/*.spec.js'
      - 'jest.config.js'
      - 'playwright.config.js'
      - 'playwright.docker.config.js'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linting (if available)
        run: |
          if npm run lint --silent 2>/dev/null; then
            echo "Running lint..."
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi
        continue-on-error: false

      - name: Run tests (if available)
        run: |
          if npm run test --silent 2>/dev/null; then
            echo "Running tests..."
            npm run test
          else
            echo "No test script found, running basic validation..."
            npm run build
          fi

      - name: Test Redis connection (if applicable)
        run: |
          if npm run test:redis --silent 2>/dev/null; then
            echo "Testing Redis connection..."
            npm run test:redis
          else
            echo "No Redis test available, skipping..."
          fi
        continue-on-error: true
        env:
          REDIS_URL: redis://localhost:6379

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "Image to deploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${{ github.sha }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Log in to Container Registry for scanning
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: 
      name: production
      url: https://shogiwebroom.fly.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Verify Fly.io configuration
        run: |
          echo "Verifying fly.toml configuration..."
          flyctl config validate
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: |
          echo "Deploying to Fly.io..."
          echo "Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          flyctl deploy --remote-only --wait-timeout 600 --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health Check
        run: |
          echo "Performing health check..."
          sleep 30
          curl -f https://shogiwebroom.fly.dev/ || exit 1
        timeout-minutes: 5

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging'
    environment:
      name: staging
      url: https://shogiwebroom-staging.fly.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          echo "Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          flyctl deploy --remote-only --wait-timeout 600 --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --app shogiwebroom-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/master'
    
    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Rollback to previous deployment
        run: |
          echo "Rolling back to previous deployment..."
          flyctl releases --json | jq -r '.[1].version' | xargs -I {} flyctl scale count 0 --yes
          flyctl releases --json | jq -r '.[0].version' | xargs -I {} flyctl deploy --image {}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/master'
    
    steps:
      - name: Deployment Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Application URL: https://shogiwebroom.fly.dev"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs and consider rollback if necessary."