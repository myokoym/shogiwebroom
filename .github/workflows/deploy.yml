name: Deploy to Production

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'blogs/**'
      - '.kiro/**'
      - '.claude/**'
      - '.gitignore'
      - 'LICENSE'

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  NODE_OPTIONS: "--openssl-legacy-provider"

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Check deployment readiness
        id: check-deploy
        run: |
          # Check if critical files exist
          if [ ! -f "fly.toml" ]; then
            echo "Missing fly.toml configuration"
            exit 1
          fi
          
          if [ ! -f "Dockerfile" ]; then
            echo "Missing Dockerfile"
            exit 1
          fi
          
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "Pre-deployment checks passed"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for production
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: shogiwebroom:production

      - name: Test Docker image
        run: |
          docker run --rm -d --name prod-test -p 3000:3000 shogiwebroom:production
          sleep 15
          
          # Health check
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 3; done'
          
          # Basic functionality test
          curl -f http://localhost:3000/ || exit 1
          
          docker stop prod-test

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-test]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    timeout-minutes: 10
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Verify Fly.io authentication
        run: |
          if [ -z "$FLY_API_TOKEN" ]; then
            echo "FLY_API_TOKEN is not set"
            exit 1
          fi
          flyctl auth whoami

      - name: Deploy to Fly.io
        run: |
          echo "Starting deployment..."
          flyctl deploy --remote-only --strategy=rolling --verbose
          
          echo "Verifying deployment..."
          flyctl status
          
          # Wait for deployment to be ready
          timeout 180 bash -c 'until flyctl status | grep -q "started"; do sleep 5; done'

      - name: Post-deployment health check
        run: |
          APP_URL=$(flyctl status --json | jq -r '.Hostname')
          if [ "$APP_URL" != "null" ] && [ -n "$APP_URL" ]; then
            echo "Health checking: https://$APP_URL"
            timeout 60 bash -c "until curl -f https://$APP_URL/api/health; do sleep 5; done"
            echo "Deployment successful! App is healthy at https://$APP_URL"
          else
            echo "Could not determine app URL, checking default..."
            timeout 60 bash -c "until curl -f https://shogiwebroom.fly.dev/api/health; do sleep 5; done"
            echo "Deployment successful!"
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Application has been successfully deployed to production" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Live URL:** https://shogiwebroom.fly.dev" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to production has failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the deployment logs in the previous step" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify all required secrets are configured" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure the application builds successfully locally" >> $GITHUB_STEP_SUMMARY
          fi